<?php    /**     * This Package emulates the AT89S52 microcontroller     * (without interrupt and timer support)     *     * @author Jan Pieper <foo@bar.de>     * @package Atmel 89S52     * @version 0.1     */    class AT89S52    {        /* ----------------------------------------------------------------- */        private $storage  = array(            'mem' => array(),            'ram' => array()        );        private $synonyms = array();        private $labels   = array();        private $memStart = 0x8000;        private $memEnd   = 0x8500;        private $currPos  = 0x8000; // currPos == memStart (only at init)        /* ----------------------------------------------------------------- */        const FILLER_DIRECTION_RIGHT = 1;        const FILLER_DIRECTION_LEFT  = 2;        const FILLER_LENGTH          = 4;        /* ----------------------------------------------------------------- */       /**        * @access private        * @return void        */        public function __construct()        {            $this->initVars();            $this->initStorage();        }        /* ----------------------------------------------------------------- */        /**        * @access private        * @return void        */        private function initVars()        {            $this->storage = array(                'mem' => array(),                'ram' => array()            );            $this->memStart = 0x8000;            $this->memEnd   = 0x8010;            $this->currPos  = 0x8000; // currPos == memStart (only at init)            $this->synonyms = array();            $this->labels   = array();        }        /* ----------------------------------------------------------------- */        /**        * @access private        * @return void        */        private function initStorage()        {            $this->initMem();            $this->initRam();        }        /* ----------------------------------------------------------------- */        /**         * @access private         * @return void         */        private function initMem()        {            for($i=$this->memStart; $i<$this->memEnd; $i++) {                $this->storage['mem'][$this->makeAddress($i)] = 'NOP';            }        }        /* ----------------------------------------------------------------- */        /**         * @access private         * @return void         */        private function initRam()        {            for($i=0x0000; $i<0x0800; $i++) {                $this->storage['ram'][$this->makeAddress($i)] = '0';            }                        $data = array(                  0 => 0x0000, // 0000H | R0                  1 => 0x0000, // 0001H | R1                  2 => 0x0000, // 0002H | R2                  3 => 0x0000, // 0003H | R3                  4 => 0x0000, // 0004H | R4                  5 => 0x0000, // 0005H | R5                  6 => 0x0000, // 0006H | R6                  7 => 0x0000, // 0007H | R7                128 => 0x00FF, // 0080H | P0                129 => 0x0007, // 0081H | SP                130 => 0x0000, // 0082H | DP0L                131 => 0x0000, // 0083H | DP0H                132 => 0x0000, // 0084H | DP1L                133 => 0x0000, // 0085H | DP1H                135 => 0x0000, // 0087H | PCON                136 => 0x0000, // 0088H | TCON                137 => 0x0000, // 0089H | TMOD                138 => 0x0000, // 008AH | TL0                139 => 0x0000, // 008BH | TL1                140 => 0x0000, // 008CH | TH0                141 => 0x0000, // 008DH | TH1                142 => 0x0000, // 008EH | AUXR                136 => 0x00FF, // 0090H | P1                152 => 0x0000, // 0098H | SCON                153 => 0x0000, // 0099H | SBUF                160 => 0x0000, // 00A0H | P2                162 => 0x0000, // 00A2H | AUXR1                166 => 0x0000, // 00A6H | WDTRST                168 => 0x0000, // 00A8H | IE                176 => 0x00FF, // 00B0H | P3                184 => 0x0000, // 00B8H | IP                200 => 0x0000, // 00C8H | T2CON                201 => 0x0000, // 00C9H | T2MOD                202 => 0x0000, // 00CAH | RCAP2L                203 => 0x0000, // 00CBH | RCAP2H                204 => 0x0000, // 00CCH | TL2                205 => 0x0000, // 00CDH | TH2                208 => 0x0000, // 00D0H | PSW                224 => 0x0000, // 00E0H | ACC                240 => 0x0000  // 00F0H | B            );            foreach($data as $key => $value)            {                $index = $this->makeAddress($key);                $this->storage['ram'][$index] = $this->udh($value);            }            $synonyms = array(                'R0'     =>   0, 'R1'     =>   1, 'R2'    =>   2,                'R3'     =>   3, 'R4'     =>   4, 'R5'    =>   5,                'R6'     =>   6, 'R7'     =>   7, 'P0'    => 128,                'SP'     => 129, 'DP0L'   => 130, 'DP0H'  => 131,                'DP1L'   => 132, 'DP1H'   => 133, 'PCON'  => 135,                'TCON'   => 136, 'TMOD'   => 137, 'TL0'   => 138,                'TL1'    => 139, 'TH0'    => 140, 'TH1'   => 141,                'AUXR'   => 142, 'P1'     => 136, 'SCON'  => 152,                'SBUF'   => 153, 'P2'     => 160, 'AUXR1' => 162,                'WDTRST' => 166, 'IE'     => 168, 'P3'    => 176,                'IP'     => 184, 'T2CON'  => 200, 'T2MOD' => 201,                'RCAP2L' => 202, 'RCAP2H' => 203, 'TL2'   => 204,                'TH2'    => 205, 'PSW'    => 208, 'ACC'   => 224,                'B'      => 240            );            foreach($synonyms as $key => $value)            {                $index = $this->makeAddress($value);                $this->synonyms[$key] = $index;            }        }        /* ----------------------------------------------------------------- */        /**         * @access public         * @return array         */        public function getMem()        {            return $this->storage['mem'];        }        /* ----------------------------------------------------------------- */        /**         * @access public         * @return array         */        public function getRam()        {            return $this->storage['ram'];        }        /* ----------------------------------------------------------------- */        /**         * @access public         * @return array         */        public function getSynonyms()        {            return $this->synonyms;        }        /* ----------------------------------------------------------------- */        /**         * @access public         * @return array         */        public function getLabels()        {            return $this->labels;        }        /* ----------------------------------------------------------------- */        /**         * @access public         * @param string $name         * @param integer $location         * @return void         */        public function setLabel($name, $location)        {            $this->labels[$name] = $this->makeAddress(                $location            );        }        /* ----------------------------------------------------------------- */        /**         * @access public         * @return void         */        public function exec()        {            for($i=$this->memStart; $i<$this->memEnd; $i++)            {                // execute each mem-line            }        }        /* ----------------------------------------------------------------- */        /**         * @access public         * @param integer $location         * @return integer         */        public function getValue($location)        {            switch($location{0})            {                case '$':                    $index = $this->makeAddress(                        substr(                            $location, 1, strlen($location)                        )                    );                    if(array_key_exists($index, $this->storage['ram'])) {                        return $this->storage['ram'][$index];                    }                break;                case '@':                    $index = substr(                        $location, 1, strlen($location)                    );                    if(array_key_exists($index, $this->synonyms))                    {                        $index = $this->makeAddress(                            hexdec($this->storage['ram'][$this->synonyms[$index]])                        );                        return $this->storage['ram'][$index];                    }                break;                case '#':                    if($location{1} == '$') {                        return substr(                            $location, 2, strlen($location)                        );                    }                    else {                        return dechex(                            substr(                                $location, 1, strlen($location)                            )                        );                    }                break;            }        }        /* ----------------------------------------------------------------- */        /**         * @access private         * @param string $value         * @param string $filler         * @param integer $length         * @param integer $dir         * @return void         */        private function makeAddress($value, $filler = '0',                                     $length = self::FILLER_LENGTH,                                     $dir    = self::FILLER_DIRECTION_LEFT)        {            $value   = dechex($value);            $vlength = strlen($value);            if($vlength < $length)            {                for($i=$vlength; $i<$length; $i++)                {                    if($dir == self::FILLER_DIRECTION_RIGHT) {                        $value .= $filler;                    }                    elseif($dir == self::FILLER_DIRECTION_LEFT) {                        $value = $filler.$value;                    }                }            }            return strtoupper(                $value            );        }        /* ----------------------------------------------------------------- */        /**         * @access private         * @param integer $value         * @return string         */        private function udh($value)        {            return strtoupper(                dechex($value)            );        }        /* ----------------------------------------------------------------- */    }    $mc = new AT89S52();    $mc->setLabel('LOOP', 0x7800);    echo '<pre>';    //print_r($mc->getLabels());    //print_r($mc->getSynonyms());    print_r($mc->getMem());    print_r($mc->getRam());    echo '</pre>';?>